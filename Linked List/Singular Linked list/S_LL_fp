// Program to perform insertion, deletion, create, display operations in single linked list 
// using functions and pointers

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node. It is a self-referential structure
struct node {
    int data;
    struct node *next;
};

// Function prototypes
struct node *create_ll();
struct node *display_ll(struct node *);
struct node *insert_Node(struct node *);
struct node *delete_Node(struct node *);

int main() {
    struct node *start = NULL;
    int option;

    printf("Namaskaram! This code performs both insertion and deletion on a single linked list.\n");

    // Main menu loop
    do {
        printf("\n\n\t\t----------MAIN MENU----------"
               "\n 1:) Create a Linked-List"
               "\n 2:) Display the Linked-List"
               "\n 3:) Insert a node in the LL"
               "\n 4:) Delete a node in the LL"
               "\n 5:) Exit the program"
               "\n\n Enter your choice : ");
        if (scanf("%d", &option) != 1) {
            printf("Invalid input. Please enter a number.\n");
            while (getchar() != '\n'); // clear the input buffer
            continue;
        }
        if(option > 5 || option < 1) {
            printf("Invalid choice. Please try again.\n");
            continue;
        }

        switch(option) {
            case 1:
                start = create_ll();
                break;
            case 2:
                display_ll(start);
                break;
            case 3:
                start = insert_Node(start);
                break;
            case 4:
                start = delete_Node(start);
                break;
            case 5:
                printf("\nExiting...\n");
                break;
        }
    } while(option != 5);

    return 0;
}

struct node *create_ll() {
    struct node *start = NULL, *newNode, *ptr;
    int num;

    printf("\n Type numbers to create a Linked list (enter -1 to end):\n ");
    while (scanf("%d", &num) == 1 && num != -1) {
        newNode = (struct node *)malloc(sizeof(struct node));
        if (newNode == NULL) {
            printf("Memory allocation failed. \n");
            return start; // Return the current state of the linked list
        }

        newNode->data = num;
        newNode->next = NULL;

        if (start == NULL) {
            start = newNode;
        } else {
            ptr = start;
            while (ptr->next != NULL){
                ptr = ptr->next;
            }
            ptr->next = newNode;
        }

        printf(" Enter next number to add to the Linked-List (enter -1 to end): ");
    }
    return start;
}

struct node *display_ll(struct node *start) {
    if (start == NULL) {
        printf("\nList is empty.\n");
        return;
    }

    struct node *ptr = start;
    printf("\nLinked List: ");
    while (ptr != NULL) {
        printf("%d -> ", ptr->data);
        ptr = ptr->next;
    }
    printf("NULL\n");
}

struct node *insert_Node(struct node *start) {
    struct node *newNode, *ptr, *prev;
    int num, val, choice;

    printf("\n Choose method of insertion:"
           "\n 1:) Insert at the beginning"
           "\n 2:) Insert at the end"
           "\n 3:) Insert after a specific value"
           "\n 4:) Insert before a specific value"
           "\n\n Enter your choice: ");
    scanf("%d", &choice);
    if(choice < 1 || choice > 4) {
        printf("Invalid choice. Please try again.\n");
        return start;
    }

    printf("\n Enter the data to be inserted: ");
    scanf("%d", &num);

    newNode = (struct node *)malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("Memory allocation failed. Unable to insert node.\n");
        return start;
    }
    newNode->data = num;

    switch(choice) {
        case 1:
            newNode->next = start;
            start = newNode;
            break;
        case 2:
            if (start == NULL) {
                start = newNode;
                newNode->next = NULL;
            } else {
                ptr = start;
                while (ptr->next != NULL) {
                    ptr = ptr->next;
                }
                ptr->next = newNode;
                newNode->next = NULL;
            }
            break;
        case 3:
            printf(" Enter the value after which to insert: ");
            scanf("%d", &val);
            ptr = start;
            while (ptr != NULL && ptr->data != val) {
                ptr = ptr->next;
            }
            if (ptr == NULL) {
                printf("Value not found in the list.\n");
                free(newNode);
            } else {
                newNode->next = ptr->next;
                ptr->next = newNode;
            }
            break;
        case 4:
            printf(" Enter the value before which to insert: ");
            scanf("%d", &val);
            ptr = start;
            prev = NULL;
            while (ptr != NULL && ptr->data != val) {
                prev = ptr;
                ptr = ptr->next;
            }
            if (ptr == NULL) {
                printf("Value not found in the list.\n");
                free(newNode);
            } else {
                newNode->next = ptr;
                if (prev == NULL) {
                    start = newNode;
                } else {
                    prev->next = newNode;
                }
            }
            break;
    }

    return start;
}

struct node *delete_Node(struct node *start) {
    if (start == NULL) {
        printf("\nList is empty. Nothing to delete.\n");
        return start;
    }

    struct node *ptr = start, *prev = NULL;
    int choice, pos;

    printf("\n Choose method of deletion:"
           "\n 1:) Delete at the beginning"
           "\n 2:) Delete at the end"
           "\n 3:) Delete at a specific position"
           "\n\n Enter your choice: ");
    scanf("%d", &choice);
    if(choice < 1 || choice > 3) {
        printf("Invalid choice. Please try again.\n");
        return start;
    }

    switch(choice) {
        case 1:
            start = start->next;
            free(ptr);
            break;
        case 2:
            while (ptr->next != NULL) {
                prev = ptr;
                ptr = ptr->next;
            }
            if (prev != NULL) {
                prev->next = NULL;
            } else {
                start = NULL; // If there was only one node
            }
            free(ptr);
            break;
        case 3:
            printf("\n Enter the position to be deleted: ");
            scanf("%d", &pos);

            if (pos < 1) {
                printf("\nInvalid position.\n");
                return start;
            }

            int count = 1;
            ptr = start;
            while (ptr != NULL && count < pos) {
                prev = ptr;
                ptr = ptr->next;
                count++;
            }

            if (ptr == NULL) {
                printf("\nPosition not found in the list.\n");
            } else {
                if (prev != NULL) {
                    prev->next = ptr->next;
                } else {
                    start = ptr->next; // If deleting the first node
                }
                free(ptr);
            }
            break;
    }
    return start;
}
