#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
struct TreeNode {
    int data;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node in the Binary Search Tree
struct TreeNode* insertNode(struct TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }
    return root;
}

// Function to find the minimum value node in a subtree
struct TreeNode* findMin(struct TreeNode* root) {
    while (root->left != NULL) root = root->left;
    return root;
}

// Function to delete a node in the Binary Search Tree
struct TreeNode* deleteNode(struct TreeNode* root, int key) {
    if (root == NULL) return root;
    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if (root->left == NULL) {
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        // Node with two children: get the inorder successor (smallest in the right subtree)
        struct TreeNode* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}


// Function for inorder traversal
void inorder(struct TreeNode* root) {
    if (root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

// Function for preorder traversal
void preorder(struct TreeNode* root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

// Function for postorder traversal
void postorder(struct TreeNode* root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}



// Function for level order traversal (improved display)
void printTree(struct TreeNode* root) {
    if (root == NULL) return;
    struct TreeNode* queue[100]; // Assuming a maximum of 100 nodes for simplicity
    int front = 0, rear = 0;
    queue[rear++] = root;
    while (front != rear) {
        struct TreeNode* temp = queue[front++];
        printf("%d ", temp->data);
        if (temp->left) queue[rear++] = temp->left;
        if (temp->right) queue[rear++] = temp->right;
    }
    printf("\n");
}

// Function to search for a key in the tree
int search(struct TreeNode* root, int key) {
    if (root == NULL) return 0;
    if (root->data == key) return 1;
    return search(root->left, key) || search(root->right, key);
}

// Function to delete the tree (free memory)
void deleteTree(struct TreeNode* root) {
    if (root == NULL) return;
    deleteTree(root->left);
    deleteTree(root->right);
    free(root);
}

int main() {
    struct TreeNode* root = NULL;
    int option, data, key;

    do {
        printf("\n\n\t\t----------MAIN MENU----------"
               "\n 1:) Insert a node"
               "\n 2:) Inorder traversal"
               "\n 3:) Preorder traversal"
               "\n 4:) Postorder traversal"
               "\n 5:) Level order traversal (Display)"
               "\n 6:) Search for a key"
               "\n 7:) Delete a node"
               "\n 8:) Delete the tree"
               "\n 9:) Exit the program"
               "\n\n Enter your choice : ");
        if (scanf("%d", &option) != 1) {
            printf("Invalid input. Please enter a number.\n");
            while (getchar() != '\n'); // clear the input buffer
            continue;
        }
        if(option < 1 || option > 9) {
            printf("Invalid choice. Please try again.\n");
            continue;
        }

        switch(option) {
            case 1: {
                printf("\n Enter data for the new node: ");
                scanf("%d", &data);
                root = insertNode(root, data);
                break;
            }
            case 2: {
                printf("\n Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            }
            case 3: {
                printf("\n Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            }
            case 4: {
                printf("\n Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            }
            case 5: {
                printf("\nDisplaying the tree (Level Order): ");
                printTree(root);
                break;
            }
            case 6: {
                printf("\n Enter the key to search: ");
                scanf("%d", &key);
                if (search(root, key))
                    printf("Key found in the tree.\n");
                else
                    printf("Key not found in the tree.\n");
                break;
            }
            case 7: {
                printf("\n Enter the key to delete: ");
                scanf("%d", &key);
                root = deleteNode(root, key);
                printf("Key deleted from the tree.\n");
                break;
            }
            case 8: {
                printf("\nDeleting the tree...\n");
                deleteTree(root);
                root = NULL; // Reset root pointer
                break;
            }
            case 9:
                printf("\nExiting...\n");
                break;
            default:
                printf("\nTry again!\n");
        }
    } while(option != 9);

    // Ensure the tree is deleted before exiting
    deleteTree(root);

    return 0;
}
